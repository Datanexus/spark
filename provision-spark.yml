#!/usr/bin/env ansible-playbook
#
# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# Build our spark and spark_master host groups
- name: Create spark and spark_master host groups
  hosts: localhost
  gather_facts: yes
  vars_files:
    - vars/spark.yml
  tasks:
    # load the 'configuration file' (if one was defined) to get any variables
    # we might need during this playbook run
    - name: Load configuration file
      include_vars:
        file: "{{config_file | default('config.yml')}}"
    # if we're using dynamic provisioning; build the host groups from the
    # meta-data associated with the matching nodes in the selected cloud
    - block:
      # get a list of the node_map entries for this application
      - set_fact:
          node_map_entries: "{{node_map | selectattr('application', 'equalto', application) | list}}"
          node_map_master_entries: "{{node_map | selectattr('application', 'equalto', application) | selectattr('role', 'defined') | selectattr('role', 'equalto', 'master') | list}}"
      # if more than two node_map entries were found or no matching node_map
      # entries were found, then it's an error
      - fail:
          msg: "Multiple {{application}} node_map entries found"
        when: node_map_entries | length > 2
      - fail:
          msg: "No {{application}} node_map entries found"
        when: node_map_entries | length == 0
      # build the spark and zookeeper host groups from existing inventory
      - include_role:
          name: build-app-host-groups
        vars:
          host_group_list:
            - { name: spark, role: master }
            - name: spark
            - name: zookeeper
      - set_fact:
          num_spark_master_nodes: "{{groups['spark_master'] | default([]) | length}}"
          num_spark_nodes: "{{groups['spark'] | default([]) | length}}"
          num_zk_nodes: "{{groups['zookeeper'] | default([]) | length}}"
      # if at least one master node was not found (or at least one master node
      # is not defined in the node_map), then it's an error
      - fail:
          msg: "At least one master node must be provided for Spark deployments"
        when:
          - (num_spark_master_nodes | int == 0) and (node_map_master_entries.0.count == 0)
      # if an external Zookeeper ensemble (or node) was not found and we're
      # deploying an multi-master Spark cluster (or multiple matching Spark
      # Master nodes were found), then it's an error
      - fail:
          msg: "An external Zookeeper ensemble is required for multi-master Spark deployments"
        when:
          - (num_spark_master_nodes | int == 0 and node_map_master_entries.0.count > 1) or num_spark_master_nodes | int > 1
          - num_zk_nodes | int == 0
      # if there were no Spark nodes found, then deploy a matching set of
      # instances into the target cloud environment, ensuring that there
      # are an appropriately tagged, based on the input tags and the node_map
      # entries for this application
      - include_role:
          name: 'aws'
        when: num_spark_master_nodes | int == 0 and num_spark_nodes | int == 0 and cloud == 'aws'
      - include_role:
          name: 'osp'
        when: num_spark_master_nodes | int == 0 and num_spark_nodes == 0 and cloud == 'osp'
      when: cloud is defined and (cloud == 'aws' or cloud == 'osp')

# If we're dynamically provisioning, then do some final configuration on the
# VMs that were just launched (assuming that we're not re-using existing VMs)
- name: Complete OS configuration
  hosts: spark_master:spark
  gather_facts: yes
  vars_files:
    - vars/spark.yml
  tasks:
    # first, initialize the play
    - include_role:
        name: initialize-play
      vars:
        gather_facts: false
        skip_network_restart: true
    # if this is a cloud deployment and we need to (re)configure nodes...
    - block:
      # then run the `preflight` role to finish the configuration of the nodes
      # that were just allocated
      - include_role:
          name: preflight
        vars:
          mountpoint: "/data"
      # and set a fact indicating that we (re)configured nodes in this play
      - set_fact:
          configured_nodes: true
      when:
        - cloud is defined and (cloud == 'aws' or cloud == 'osp')
        - ((force_node_reconfig | default(false)) | bool) or ((hostvars['localhost']['num_spark_master_nodes'] | int) == 0 and (hostvars['localhost']['num_spark_nodes'] | int) == 0)

# Collect some Zookeeper related facts (if a `zookeeper` host group is defined)
- name: Gather facts from Zookeeper host group (if defined)
  hosts: zookeeper
  tasks: []

# Then, deploy Spark to the nodes in the spark_master host group
- name: Install/configure servers (master nodes)
  hosts: spark_master
  gather_facts: no
  vars_files:
    - vars/spark.yml
  vars:
    - combined_package_list: "{{ (default_packages|default([])) | union(spark_package_list) | union((install_packages_by_tag|default({})).spark|default([])) }}"
    - spark_master_nodes: "{{groups['spark_master'] | default([])}}"
    - zookeeper_nodes: "{{groups['zookeeper'] | default([])}}"
    - cluster_role: master
  pre_tasks:
    # first, initialize the play by loading any `config_file` that may have
    # been passed in, restarting the network on the target nodes (if desired),
    # and determining the `data_iface` and `api_iface` values from the input
    # `iface_description_array` (if one was passed in)
    - include_role:
        name: initialize-play
      vars:
        skip_network_restart: "{{configured_nodes | default(false)}}"
    # and set a few facts that we'll need later in the playbook
    - set_fact:
        zk_nodes: "{{zookeeper_nodes | map('extract', hostvars, [('ansible_' + data_iface), 'ipv4', 'address']) | list}}"
        is_multi_master_play: "{{(spark_master_nodes | length) > 1}}"
        spark_master_data_ips: "{{(spark_master_nodes | default([data_addr])) | map('extract', hostvars, ['ansible_' + data_iface, 'ipv4', 'address']) | list}}"
  roles:
    # now that we have all of the facts we need, provision the input nodes
    - role: spark

# Once the master nodes have been deployed, repeat the same process to deploy Spark to the nodes in
# the spark host group
- name: Install/configure servers (worker nodes)
  hosts: spark
  gather_facts: no
  vars_files:
    - vars/spark.yml
  vars:
    - combined_package_list: "{{ (default_packages|default([])) | union(spark_package_list) | union((install_packages_by_tag|default({})).spark|default([])) }}"
    - spark_master_nodes: "{{groups['spark_master'] | default([])}}"
  pre_tasks:
    # first, initialize the play by loading any `config_file` that may have
    # been passed in, restarting the network on the target nodes (if desired),
    # and determining the `data_iface` and `api_iface` values from the input
    # `iface_description_array` (if one was passed in)
    - include_role:
        name: initialize-play
      vars:
        skip_network_restart: "{{configured_nodes | default(false)}}"
    # and set a fact that we'll need later in the playbook
    - set_fact:
        spark_master_data_ips: "{{(spark_master_nodes | default([data_addr])) | map('extract', hostvars, ['ansible_' + data_iface, 'ipv4', 'address']) | list}}"
  roles:
    # now that we have all of the facts we need, provision the input nodes
    - role: spark
